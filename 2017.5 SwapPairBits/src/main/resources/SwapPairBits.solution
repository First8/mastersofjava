

public class SwapPairBits {
	
	public long execute(long k, int p, int q) {		
		// TODO: insert algorithm here to compute k2
		long k2 = 0; 
		//<Solution>
		p--;
	    q--;
	    
	    boolean b = (k>>p&1) == (k>>q&1);
	    long c =    (k>>p ^ k>>q)&1;
	    System.out.println(b + ", " + c);
	    k2 =b?k:k ^ 1l<<p ^ 1l<<q;
	    //</Solution>
	    return k2; 
	}
	
	//<Solution>
	public long executeShort(long n, int p, int q) {
	    return n ^ (n = (n>>--p ^ n>>--q)&1)<<p ^ n<<q;
	}
	//</Solution>
	
	
	//<Tests>
	public boolean test565() {
		return this.execute(565, 9, 3)==817; 
	}
	
	public boolean test1() {
		return this.execute(1, 1, 1)==1; 
	}
	public boolean test2() {
		return this.execute(2, 2, 1)==1; 
	}
	public boolean test512_as_output() {
		long temp = 4294967296L; 
		return this.execute(temp, 33, 10)==512; 
	}
	public boolean test512_as_input() {
		return this.execute(512, 33, 10)==4294967296L; 
	}
	public boolean testBig_Numbers() {
		return this.execute(123456789, 20, 10)==122933013; 
	}
	//</Tests>
	
}