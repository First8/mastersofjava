

public enum TEST_CASE {
	SIMPLE(new Integer [][]{ //
			{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
			{5, 4, 1, 6, 3, 7, 2, 8, 9}, //
			{3, 7, 8, 2, 9, 1, 4, 5, 6}, //
			{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
			{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
			{4, 3, 2, 8, 7, 9, 5, 6, 1}, //
			{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
			{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
			{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, true, "A simple, valid field."),
	HARD(new Integer[][]{ //
				{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
				{5, 4, 1, 6, 3, 7, 2, 8, 9}, //
				{3, 7, 8, 2, 9, 1, 4, 5, 6}, //
				{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
				{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
				{4, 3, 2, 8, 7, 9, 5, 6, 1}, //
				{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
				{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
				{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, true, "A hard, valid field."),
	FIELD_VAL_TOO_HIGH(new Integer[][]{ //
			{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
			{5, 4, 1, 6, 3, 7, 2, 8, 9}, //
			{3, 7, 8, 2, 9, 1, 4, 5, 6}, //
			{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
			{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
			{4, 3, 2, 8, 7, 10, 5, 6, 1}, //
			{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
			{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
			{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, false, "A field containing a value that is too high"),
	FIELD_VAL_TOO_LOW(new Integer[][]{ //
			{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
			{5, 4, 1, 6, 3, 7, 2, 8, 9}, //
			{3, 7, 8, 2, 9, 1, 4, 5, 6}, //
			{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
			{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
			{4, 3, 2, 8, 7, 0, 5, 6, 1}, //
			{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
			{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
			{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, false, "A field containing a value that is too low"),
	INVALID_COLS(new Integer[][]{ //
			{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
			{5, 4, 1, 6, 3, 7, 8, 2, 9}, //
			{3, 7, 8, 2, 9, 1, 5, 4, 6}, //
			{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
			{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
			{4, 3, 2, 8, 7, 9, 5, 6, 1}, //
			{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
			{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
			{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, false, "A field containing invalid columns."),
	INVALID_ROWS(new Integer[][]{ //
			{9, 2, 6, 5, 4, 8, 7, 1, 3}, //
			{5, 4, 1, 6, 3, 7, 4, 5, 9}, //
			{3, 7, 8, 2, 9, 1, 2, 8, 6}, //
			{8, 1, 5, 4, 6, 3, 9, 7, 2}, //
			{6, 9, 7, 1, 5, 2, 8, 3, 4}, //
			{4, 3, 2, 8, 7, 9, 5, 6, 1}, //
			{7, 5, 9, 3, 2, 6, 1, 4, 8}, //
			{2, 8, 3, 7, 1, 4, 6, 9, 5}, //
			{1, 6, 4, 9, 8, 5, 3, 2, 7} //
	}, false, "A field containing invalid rows."),
	NULL_VALUES(new Integer[][]{ //
			{2, 6, 5, 4, 8, 7, 1, 3, 9}, //
			{4, 1, null, 3, 7, 2, 8, 9, 5}, //
			{7, 8, 2, 9, 1, 4, 5, 6, 3}, //
			{1, 5, 4, 6, 3, 9, 7, 2, 8}, //
			{9, 7, 1, 5, 2, null, 3, 4, 6}, //
			{3, 2, 8, 7, 9, 5, 6, 1, 4}, //
			{5, 9, 3, 2, 6, 1, 4, 8, 7}, //
			{8, 3, 7, 1, 4, 6, 9, 5, 2}, //
			{6, 4, 9, 8, 5, 3, 2, 7, 1} //
	}, false, "A field containing null values."),
	INVALID_CELLS(new Integer[][]{ //
			{2, 6, 5, 4, 8, 7, 1, 3, 9}, //
			{4, 1, 6, 3, 7, 2, 8, 9, 5}, //
			{7, 8, 2, 9, 1, 4, 5, 6, 3}, //
			{1, 5, 4, 6, 3, 9, 7, 2, 8}, //
			{9, 7, 1, 5, 2, 8, 3, 4, 6}, //
			{3, 2, 8, 7, 9, 5, 6, 1, 4}, //
			{5, 9, 3, 2, 6, 1, 4, 8, 7}, //
			{8, 3, 7, 1, 4, 6, 9, 5, 2}, //
			{6, 4, 9, 8, 5, 3, 2, 7, 1} //
	}, false, "A field containing invalid cells.");
	
	
	public final Integer[][] field;
	public final String message;
	public final boolean assertion;
	
	TEST_CASE(Integer[][] seed, boolean assertion, String message){
		this.field = seed;
		this.assertion = assertion;
		this.message = message;
		
	}
	
}
